* What is the Shadowing :-
	Block Scoping: To understand shadowing in JavaScript, we need to be clear with the scope first. In computer programming languages, Scope is a certain section/region of the program where a defined variable can have its existence and can be recognized, beyond that it can’t be accessed. In JavaScript, a Block is a compound statement that is defined by curly braces {} and used to combine multiple statements into one statement where JavaScript expects only one statement. And all the variables and functions that can be accessed inside a block are said to be inside that block scope, hence called Block scoped.
For example, let and const variables are stored in separate memory space, so it is called block-scoped but var variables can be accessed outside the block as it is stored in the Global object memory space, hence it is called Global scoped.
Shadowing: Now, when a variable is declared in a certain scope having the same name defined on its outer scope and when we call the variable from the inner scope, the value assigned to the variable in the inner scope is the value that will be stored in the variable in the memory space. This is known as Shadowing or Variable Shadowing. In JavaScript, the introduction of let and const in ECMAScript 6 along with block scoping allows variable shadowing.
	Example : function func() {
	let a = ABC;
	if (true) {
		let a = 'XYZ'; // New value assigned
		console.log(a);
	}
	console.log(a);
func();
Output :
	XYZ;
	ABC;
 
Illegal Shadowing: Now, while shadowing a variable, it should not cross the boundary of the scope, i.e. we can shadow var variable by let variable but cannot do the opposite. So, if we try to shadow let variable by var variable, it is known as Illegal Shadowing and it will give the error as “variable is already defined.” 
Example : function func() {
var a = 'Geeks';
	let b = ‘ABC’;
	if (true) {
		let a = ‘Hello’; // Legal Shadowing
		var b = “XYZ; // Illegal Shadowing
		console.log(a); // It will print 'GeeksforGeeks'
		console.log(b); // It will print error
	}
}
func();
Output :
	Identifier 'b' has already been declared

* Hoisting :
	In JavaScript, Hoisting is the default behavior of moving all the declarations at the top of the scope before code execution. Basically, it gives us an advantage that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local.
It allows us to call functions before even writing them in our code.
	Example : 
		// hoisting
	function codeHoist(){
		a = 10;
		let b = 50;
	}
	codeHoist();

	console.log(a); // 10
	console.log(b); // ReferenceError : b is not defined


* Dead Zone : 
	period between entering scope and being declared where they cannot be accessed. This period is the temporal dead zone (TDZ).
	Example : 
		//console.log(aLet)  // would throw ReferenceError

		let aLet;
		console.log(aLet); // undefined
		aLet = 10;
		console.log(aLet); // 10
